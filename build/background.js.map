{"version":3,"file":null,"sources":["../node_modules/twgl-base.js/dist/2.x/twgl.js","../lib/index.js"],"sourcesContent":["/*!\n * @license twgl.js 2.6.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\n * Available via the MIT license.\n * see: http://github.com/greggman/twgl.js for details\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (twgl) {\n\t  \"use strict\";\n\n\t  return twgl;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(8), __webpack_require__(3), __webpack_require__(9), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (attributes, draw, framebuffers, programs, textures, typedArrays, vertexArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * The main TWGL module.\n\t   *\n\t   * For most use cases you shouldn't need anything outside this module.\n\t   * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n\t   *\n\t   * @module twgl\n\t   * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n\t   * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n\t   * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n\t   * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n\t   * @borrows module:twgl/draw.drawObjectList as drawObjectList\n\t   * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n\t   * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n\t   * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n\t   * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n\t   * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n\t   * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n\t   * @borrows module:twgl/programs.setUniforms as setUniforms\n\t   * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n\t   * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n\t   * @borrows module:twgl/textures.createTexture as createTexture\n\t   * @borrows module:twgl/textures.resizeTexture as resizeTexture\n\t   * @borrows module:twgl/textures.createTextures as createTextures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    enableVertexArrayObjects: true\n\t  };\n\n\t  /**\n\t   * Various default settings for twgl.\n\t   *\n\t   * Note: You can call this any number of times. Example:\n\t   *\n\t   *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n\t   *     twgl.setDefaults({ attribPrefix: 'a_' });\n\t   *\n\t   * is equivalent to\n\t   *\n\t   *     twgl.setDefaults({\n\t   *       textureColor: [1, 0, 0, 1],\n\t   *       attribPrefix: 'a_',\n\t   *     });\n\t   *\n\t   * @typedef {Object} Defaults\n\t   * @property {string} attribPrefix The prefix to stick on attributes\n\t   *\n\t   *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   *   In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *       var arrays = {\n\t   *         position: ...\n\t   *         normal: ...\n\t   *         texcoord: ...\n\t   *       };\n\t   *\n\t   *   But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   *   Default: `\"\"`\n\t   *\n\t   * @property {number[]} textureColor Array of 4 values in the range 0 to 1\n\t   *\n\t   *   The default texture color is used when loading textures from\n\t   *   urls. Because the URL will be loaded async we'd like to be\n\t   *   able to use the texture immediately. By putting a 1x1 pixel\n\t   *   color in the texture we can start using the texture before\n\t   *   the URL has loaded.\n\t   *\n\t   *   Default: `[0.5, 0.75, 1, 1]`\n\t   *\n\t   * @property {string} crossOrigin\n\t   *\n\t   *   If not undefined sets the crossOrigin attribute on images\n\t   *   that twgl creates when downloading images for textures.\n\t   *\n\t   *   Also see {@link module:twgl.TextureOptions}.\n\t   *\n\t   * @property {bool} enableVertexArrayObjects\n\t   *\n\t   *   If true then in WebGL 1.0 will attempt to get the `OES_vertex_array_object` extension.\n\t   *   If successful it will copy create/bind/delete/isVertexArrayOES from the extension to\n\t   *   the WebGLRenderingContext removing the OES at the end which is the standard entry point\n\t   *   for WebGL 2.\n\t   *\n\t   *   Note: According to webglstats.com 90% of devices support `OES_vertex_array_object`.\n\t   *   If you just want to count on support I suggest using [this polyfill](https://github.com/KhronosGroup/WebGL/blob/master/sdk/demos/google/resources/OESVertexArrayObject.js)\n\t   *   or ignoring devices that don't support them.\n\t   *\n\t   *   Default: `true`\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Sets various defaults for twgl.\n\t   *\n\t   * In the interest of terseness which is kind of the point\n\t   * of twgl I've integrated a few of the older functions here\n\t   *\n\t   * @param {module:twgl.Defaults} newDefaults The default settings.\n\t   * @memberOf module:twgl\n\t   */\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    attributes.setDefaults_(newDefaults); // eslint-disable-line\n\t    textures.setDefaults_(newDefaults); // eslint-disable-line\n\t  }\n\n\t  /**\n\t   * Adds Vertex Array Objects to WebGL 1 GL contexts if available\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   */\n\t  function addVertexArrayObjectSupport(gl) {\n\t    if (!gl || !defaults.enableVertexArrayObjects) {\n\t      return;\n\t    }\n\t    if (utils.isWebGL1(gl)) {\n\t      var ext = gl.getExtension(\"OES_vertex_array_object\");\n\t      if (ext) {\n\t        gl.createVertexArray = function () {\n\t          return ext.createVertexArrayOES();\n\t        };\n\t        gl.deleteVertexArray = function (v) {\n\t          ext.deleteVertexArrayOES(v);\n\t        };\n\t        gl.isVertexArray = function (v) {\n\t          return ext.isVertexArrayOES(v);\n\t        };\n\t        gl.bindVertexArray = function (v) {\n\t          ext.bindVertexArrayOES(v);\n\t        };\n\t        gl.VERTEX_ARRAY_BINDING = ext.VERTEX_ARRAY_BINDING_OES;\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function create3DContext(canvas, opt_attribs) {\n\t    var names = [\"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      try {\n\t        context = canvas.getContext(names[ii], opt_attribs);\n\t      } catch (e) {} // eslint-disable-line\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL context.\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @memberOf module:twgl\n\t   */\n\t  function getWebGLContext(canvas, opt_attribs) {\n\t    var gl = create3DContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   *\n\t   * Will return a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *     twgl.isWebGL2(gl);\n\t   *\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function createContext(canvas, opt_attribs) {\n\t    var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      try {\n\t        context = canvas.getContext(names[ii], opt_attribs);\n\t      } catch (e) {} // eslint-disable-line\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL context.  Will create a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *    function isWebGL2(gl) {\n\t   *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n\t   *    }\n\t   *\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @return {WebGLRenderingContext} The created context.\n\t   * @memberOf module:twgl\n\t   */\n\t  function getContext(canvas, opt_attribs) {\n\t    var gl = createContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Resize a canvas to match the size it's displayed.\n\t   * @param {HTMLCanvasElement} canvas The canvas to resize.\n\t   * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` if you want to.\n\t   * @return {boolean} true if the canvas was resized.\n\t   * @memberOf module:twgl\n\t   */\n\t  function resizeCanvasToDisplaySize(canvas, multiplier) {\n\t    multiplier = multiplier || 1;\n\t    multiplier = Math.max(1, multiplier);\n\t    var width = canvas.clientWidth * multiplier | 0;\n\t    var height = canvas.clientHeight * multiplier | 0;\n\t    if (canvas.width !== width || canvas.height !== height) {\n\t      canvas.width = width;\n\t      canvas.height = height;\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  var api = {\n\t    \"getContext\": getContext,\n\t    \"getWebGLContext\": getWebGLContext,\n\t    \"isWebGL1\": utils.isWebGL1,\n\t    \"isWebGL2\": utils.isWebGL2,\n\t    \"resizeCanvasToDisplaySize\": resizeCanvasToDisplaySize,\n\t    \"setDefaults\": setDefaults\n\t  };\n\n\t  function notPrivate(name) {\n\t    return name[name.length - 1] !== '_';\n\t  }\n\n\t  function copyPublicProperties(src, dst) {\n\t    Object.keys(src).filter(notPrivate).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  var apis = {\n\t    attributes: attributes,\n\t    draw: draw,\n\t    framebuffers: framebuffers,\n\t    programs: programs,\n\t    textures: textures,\n\t    typedArrays: typedArrays,\n\t    vertexArrays: vertexArrays\n\t  };\n\t  Object.keys(apis).forEach(function (name) {\n\t    var srcApi = apis[name];\n\t    copyPublicProperties(srcApi, api);\n\t    api[name] = copyPublicProperties(srcApi, {});\n\t  });\n\n\t  return api;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level attribute and buffer related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/attributes\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    attribPrefix: \"\"\n\t  };\n\n\t  /**\n\t   * Sets the default attrib prefix\n\t   *\n\t   * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   * In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *     var arrays = {\n\t   *       position: ...\n\t   *       normal: ...\n\t   *       texcoord: ...\n\t   *     };\n\t   *\n\t   * But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @param {string} prefix prefix for attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttributePrefix(prefix) {\n\t    defaults.attribPrefix = prefix;\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t  }\n\n\t  function setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n\t    gl.bindBuffer(type, buffer);\n\t    gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n\t  }\n\n\t  /**\n\t   * Given typed array creates a WebGLBuffer and copies the typed array\n\t   * into it.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {ArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n\t   * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n\t   * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n\t   * @return {WebGLBuffer} the created WebGLBuffer\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromTypedArray(gl, typedArray, type, drawType) {\n\t    if (typedArray instanceof WebGLBuffer) {\n\t      return typedArray;\n\t    }\n\t    type = type || gl.ARRAY_BUFFER;\n\t    var buffer = gl.createBuffer();\n\t    setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n\t    return buffer;\n\t  }\n\n\t  function isIndices(name) {\n\t    return name === \"indices\";\n\t  }\n\n\t  // This is really just a guess. Though I can't really imagine using\n\t  // anything else? Maybe for some compression?\n\t  function getNormalizationForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    return false;\n\t  }\n\n\t  function getArray(array) {\n\t    return array.length ? array : array.data;\n\t  }\n\n\t  var texcoordRE = /coord|texture/i;\n\t  var colorRE = /color|colour/i;\n\n\t  function guessNumComponentsFromName(name, length) {\n\t    var numComponents;\n\t    if (texcoordRE.test(name)) {\n\t      numComponents = 2;\n\t    } else if (colorRE.test(name)) {\n\t      numComponents = 4;\n\t    } else {\n\t      numComponents = 3; // position, normals, indices ...\n\t    }\n\n\t    if (length % numComponents > 0) {\n\t      throw \"Can not guess numComponents for attribute '\" + name + \"'. Tried \" + numComponents + \" but \" + length + \" values is not evenly divisible by \" + numComponents + \". You should specify it.\";\n\t    }\n\n\t    return numComponents;\n\t  }\n\n\t  function getNumComponents(array, arrayName) {\n\t    return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n\t  }\n\n\t  function makeTypedArray(array, name) {\n\t    if (typedArrays.isArrayBuffer(array)) {\n\t      return array;\n\t    }\n\n\t    if (typedArrays.isArrayBuffer(array.data)) {\n\t      return array.data;\n\t    }\n\n\t    if (Array.isArray(array)) {\n\t      array = {\n\t        data: array\n\t      };\n\t    }\n\n\t    var Type = array.type;\n\t    if (!Type) {\n\t      if (isIndices(name)) {\n\t        Type = Uint16Array;\n\t      } else {\n\t        Type = Float32Array;\n\t      }\n\t    }\n\t    return new Type(array.data);\n\t  }\n\n\t  /**\n\t   * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n\t   * for the attribute.\n\t   *\n\t   * @typedef {Object} AttribInfo\n\t   * @property {number} [numComponents] the number of components for this attribute.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n\t   * @property {boolean} [normalized] whether or not to normalize the data. Default = false\n\t   * @property {number} [offset] offset into buffer in bytes. Default = 0\n\t   * @property {number} [stride] the stride in bytes per element. Default = 0\n\t   * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n\t   * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Use this type of array spec when TWGL can't guess the type or number of compoments of an array\n\t   * @typedef {Object} FullArraySpec\n\t   * @property {(number[]|ArrayBuffer)} data The data of the array.\n\t   * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n\t   *    If `coord` is in the name assumes `numComponents = 2`.\n\t   *    If `color` is in the name assumes `numComponents = 4`.\n\t   *    otherwise assumes `numComponents = 3`\n\t   * @property {constructor} type The type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n\t   * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n\t   * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n\t   * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n\t   * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n\t   * @property {string} [name] synonym for `attrib`.\n\t   * @property {string} [attribName] synonym for `attrib`.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * An individual array in {@link module:twgl.Arrays}\n\t   *\n\t   * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBuffer`\n\t   * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n\t   * be `Float32Array`\n\t   *\n\t   * @typedef {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} ArraySpec\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n\t   * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a set of attribute data and WebGLBuffers from set of arrays\n\t   *\n\t   * Given\n\t   *\n\t   *      var arrays = {\n\t   *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n\t   *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *      };\n\t   *\n\t   * returns something like\n\t   *\n\t   *      var attribs = {\n\t   *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n\t   *      };\n\t   *\n\t   * notes:\n\t   *\n\t   * *   Arrays can take various forms\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * @param {WebGLRenderingContext} gl The webgl rendering context.\n\t   * @param {module:twgl.Arrays} arrays The arrays\n\t   * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createAttribsFromArrays(gl, arrays) {\n\t    var attribs = {};\n\t    Object.keys(arrays).forEach(function (arrayName) {\n\t      if (!isIndices(arrayName)) {\n\t        var array = arrays[arrayName];\n\t        var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\t        var typedArray = makeTypedArray(array, arrayName);\n\t        attribs[attribName] = {\n\t          buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n\t          numComponents: getNumComponents(array, arrayName),\n\t          type: typedArrays.getGLTypeForTypedArray(typedArray),\n\t          normalize: array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray),\n\t          stride: array.stride || 0,\n\t          offset: array.offset || 0,\n\t          drawType: array.drawType\n\t        };\n\t      }\n\t    });\n\t    return attribs;\n\t  }\n\n\t  /**\n\t   * Sets the contents of a buffer attached to an attribInfo\n\t   *\n\t   * This is helper function to dynamically update a buffer.\n\t   *\n\t   * Let's say you make a bufferInfo\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *  And you want to dynamically upate the positions. You could do this\n\t   *\n\t   *     // assuming arrays.position has already been updated with new data.\n\t   *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n\t   *\n\t   * @param {WebGLRenderingContext} gl\n\t   * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n\t   *   the name of the attribute will include the prefix.\n\t   * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything\n\t   *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n\t   *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n\t   * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n\t   *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n\t   *    for the portion of the array you want to use.\n\t   *\n\t   *        var someArray = new Float32Array(1000); // an array with 1000 floats\n\t   *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n\t   *\n\t   *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n\t    array = makeTypedArray(array);\n\t    if (offset !== undefined) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);\n\t      gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);\n\t    } else {\n\t      setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n\t    }\n\t  }\n\n\t  /**\n\t   * tries to get the number of elements from a set of arrays.\n\t   */\n\n\t  var getNumElementsFromNonIndexedArrays = function () {\n\t    var positionKeys = ['position', 'positions', 'a_position'];\n\n\t    return function getNumElementsFromNonIndexedArrays(arrays) {\n\t      var key;\n\t      for (var ii = 0; ii < positionKeys.length; ++ii) {\n\t        key = positionKeys[ii];\n\t        if (key in arrays) {\n\t          break;\n\t        }\n\t      }\n\t      if (ii === positionKeys.length) {\n\t        key = Object.keys(arrays)[0];\n\t      }\n\t      var array = arrays[key];\n\t      var length = getArray(array).length;\n\t      var numComponents = getNumComponents(array, key);\n\t      var numElements = length / numComponents;\n\t      if (length % numComponents > 0) {\n\t        throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n\t      }\n\t      return numElements;\n\t    };\n\t  }();\n\n\t  /**\n\t   * @typedef {Object} BufferInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n\t   * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a BufferInfo from an object of arrays.\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * Given an object like\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   *  Creates an BufferInfo like this\n\t   *\n\t   *     bufferInfo = {\n\t   *       numElements: 4,        // or whatever the number of elements is\n\t   *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n\t   *       attribs: {\n\t   *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n\t   *       },\n\t   *     };\n\t   *\n\t   *  The properties of arrays can be JavaScript arrays in which case the number of components\n\t   *  will be guessed.\n\t   *\n\t   *     var arrays = {\n\t   *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n\t   *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n\t   *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n\t   *        indices:  [0, 1, 2, 1, 2, 3],\n\t   *     };\n\t   *\n\t   *  They can also by TypedArrays\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *\n\t   *  Or augmentedTypedArrays\n\t   *\n\t   *     var positions = createAugmentedTypedArray(3, 4);\n\t   *     var texcoords = createAugmentedTypedArray(2, 4);\n\t   *     var normals   = createAugmentedTypedArray(3, 4);\n\t   *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n\t   *\n\t   *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n\t   *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n\t   *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n\t   *     indices.push([0, 1, 2, 1, 2, 3]);\n\t   *\n\t   *     var arrays = {\n\t   *        position: positions,\n\t   *        texcoord: texcoords,\n\t   *        normal:   normals,\n\t   *        indices:  indices,\n\t   *     };\n\t   *\n\t   * For the last example it is equivalent to\n\t   *\n\t   *     var bufferInfo = {\n\t   *       attribs: {\n\t   *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n\t   *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *       },\n\t   *       indices: gl.createBuffer(),\n\t   *       numElements: 6,\n\t   *     };\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n\t   *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.Arrays} arrays Your data\n\t   * @return {module:twgl.BufferInfo} A BufferInfo\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferInfoFromArrays(gl, arrays) {\n\t    var bufferInfo = {\n\t      attribs: createAttribsFromArrays(gl, arrays)\n\t    };\n\t    var indices = arrays.indices;\n\t    if (indices) {\n\t      indices = makeTypedArray(indices, \"indices\");\n\t      bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\n\t      bufferInfo.numElements = indices.length;\n\t      bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(indices);\n\t    } else {\n\t      bufferInfo.numElements = getNumElementsFromNonIndexedArrays(arrays);\n\t    }\n\n\t    return bufferInfo;\n\t  }\n\n\t  /**\n\t   * Creates a buffer from an array, typed array, or array spec\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     [1, 2, 3],\n\t   *\n\t   * or\n\t   *\n\t   *     new Uint16Array([1,2,3]);\n\t   *\n\t   * or\n\t   *\n\t   *     {\n\t   *        data: [1, 2, 3],\n\t   *        type: Uint8Array,\n\t   *     }\n\t   *\n\t   * returns a WebGLBuffer that constains the given data.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n\t   * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.\n\t   * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromArray(gl, array, arrayName) {\n\t    var type = arrayName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n\t    var typedArray = makeTypedArray(array, arrayName);\n\t    return createBufferFromTypedArray(gl, typedArray, type);\n\t  }\n\n\t  /**\n\t   * Creates buffers from arrays or typed arrays\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     var arrays = {\n\t   *        positions: [1, 2, 3],\n\t   *        normals: [0, 0, 1],\n\t   *     }\n\t   *\n\t   * returns something like\n\t   *\n\t   *     buffers = {\n\t   *       positions: WebGLBuffer,\n\t   *       normals: WebGLBuffer,\n\t   *     }\n\t   *\n\t   * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.Arrays} arrays\n\t   * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBuffersFromArrays(gl, arrays) {\n\t    var buffers = {};\n\t    Object.keys(arrays).forEach(function (key) {\n\t      buffers[key] = createBufferFromArray(gl, arrays[key], key);\n\t    });\n\n\t    // Ugh!\n\t    if (arrays.indices) {\n\t      buffers.numElements = arrays.indices.length;\n\t      buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n\t    } else {\n\t      buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n\t    }\n\n\t    return buffers;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttribsFromArrays\": createAttribsFromArrays,\n\t    \"createBuffersFromArrays\": createBuffersFromArrays,\n\t    \"createBufferFromArray\": createBufferFromArray,\n\t    \"createBufferFromTypedArray\": createBufferFromTypedArray,\n\t    \"createBufferInfoFromArrays\": createBufferInfoFromArrays,\n\t    \"setAttribInfoBufferFromArray\": setAttribInfoBufferFromArray,\n\n\t    \"setAttributePrefix\": setAttributePrefix,\n\n\t    \"setDefaults_\": setDefaults,\n\t    \"getNumComponents_\": getNumComponents,\n\t    \"getArray_\": getArray\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader typed array related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.typedArray` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/typedArray\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /* DataType */\n\t  var BYTE = 0x1400;\n\t  var UNSIGNED_BYTE = 0x1401;\n\t  var SHORT = 0x1402;\n\t  var UNSIGNED_SHORT = 0x1403;\n\t  var INT = 0x1404;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var FLOAT = 0x1406;\n\n\t  /**\n\t   * Get the GL type for a typedArray\n\t   * @param {ArrayBuffer|ArrayBufferView} typedArray a typedArray\n\t   * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n\t   *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getGLTypeForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8ClampedArray) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int16Array) {\n\t      return SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint16Array) {\n\t      return UNSIGNED_SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int32Array) {\n\t      return INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint32Array) {\n\t      return UNSIGNED_INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Float32Array) {\n\t      return FLOAT;\n\t    } // eslint-disable-line\n\t    throw \"unsupported typed array type\";\n\t  }\n\n\t  /**\n\t   * Get the typed array constructor for a given GL type\n\t   * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n\t   * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getTypedArrayTypeForGLType(type) {\n\t    switch (type) {\n\t      case BYTE:\n\t        return Int8Array; // eslint-disable-line\n\t      case UNSIGNED_BYTE:\n\t        return Uint8Array; // eslint-disable-line\n\t      case SHORT:\n\t        return Int16Array; // eslint-disable-line\n\t      case UNSIGNED_SHORT:\n\t        return Uint16Array; // eslint-disable-line\n\t      case INT:\n\t        return Int32Array; // eslint-disable-line\n\t      case UNSIGNED_INT:\n\t        return Uint32Array; // eslint-disable-line\n\t      case FLOAT:\n\t        return Float32Array; // eslint-disable-line\n\t      default:\n\t        throw \"unknown gl type\";\n\t    }\n\t  }\n\n\t  function isArrayBuffer(a) {\n\t    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  return {\n\t    \"getGLTypeForTypedArray\": getGLTypeForTypedArray,\n\t    \"getTypedArrayTypeForGLType\": getTypedArrayTypeForGLType,\n\t    \"isArrayBuffer\": isArrayBuffer\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Copy an object 1 level deep\n\t   * @param {object} src object to copy\n\t   * @return {object} the copy\n\t   */\n\n\t  function shallowCopy(src) {\n\t    var dst = {};\n\t    Object.keys(src).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copy named properties\n\t   *\n\t   * @param {string[]} names names of properties to copy\n\t   * @param {object} src object to copy properties from\n\t   * @param {object} dst object to copy properties to\n\t   */\n\t  function copyNamedProperties(names, src, dst) {\n\t    names.forEach(function (name) {\n\t      var value = src[name];\n\t      if (value !== undefined) {\n\t        dst[name] = value;\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Copies properties from source to dest only if a matching key is in dest\n\t   *\n\t   * @param {Object.<string, ?>} src the source\n\t   * @param {Object.<string, ?>} dst the dest\n\t   */\n\t  function copyExistingProperties(src, dst) {\n\t    Object.keys(dst).forEach(function (key) {\n\t      if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n\t        dst[key] = src[key];\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Gets the gl version as a number\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {number} version of gl\n\t   */\n\t  function getVersionAsNumber(gl) {\n\t    return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n\t  }\n\n\t  /**\n\t   * Check if context is WebGL 2.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 2.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL2(gl) {\n\t    return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n\t  }\n\n\t  /**\n\t   * Check if context is WebGL 1.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 1.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL1(gl) {\n\t    var version = getVersionAsNumber(gl);\n\t    return version <= 1.0 && version > 0.0; // because as of 2016/5 Edge returns 0.96\n\t  }\n\n\t  var error = window.console && window.console.error && typeof window.console.error === \"function\" ? window.console.error.bind(window.console) : function () {};\n\n\t  var warn = window.console && window.console.warn && typeof window.console.warn === \"function\" ? window.console.warn.bind(window.console) : function () {};\n\n\t  return {\n\t    copyExistingProperties: copyExistingProperties,\n\t    copyNamedProperties: copyNamedProperties,\n\t    shallowCopy: shallowCopy,\n\t    isWebGL1: isWebGL1,\n\t    isWebGL2: isWebGL2,\n\t    error: error,\n\t    warn: warn\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Drawing related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.draw` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/draw\n\t   */\n\n\t  /**\n\t   * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n\t   *\n\t   * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n\t   * but calling this means if you switch from indexed data to non-indexed\n\t   * data you don't have to remember to update your draw call.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n\t   *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @param {enum} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n\t   * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n\t   * @param {number} [offset] An optional offset. Defaults to 0.\n\t   * @memberOf module:twgl/draw\n\t   */\n\n\t  function drawBufferInfo(gl, bufferInfo, type, count, offset) {\n\t    type = type === undefined ? gl.TRIANGLES : type;\n\t    var indices = bufferInfo.indices;\n\t    var elementType = bufferInfo.elementType;\n\t    var numElements = count === undefined ? bufferInfo.numElements : count;\n\t    offset = offset === undefined ? 0 : offset;\n\t    if (elementType || indices) {\n\t      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);\n\t    } else {\n\t      gl.drawArrays(type, offset, numElements);\n\t    }\n\t  }\n\n\t  /**\n\t   * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n\t   *\n\t   * You need either a `BufferInfo` or a `VertexArrayInfo`.\n\t   *\n\t   * @typedef {Object} DrawObject\n\t   * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`\n\t   * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n\t   * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n\t   * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n\t   * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @property {Object<string, ?>} uniforms The values for the uniforms.\n\t   *   You can pass multiple objects by putting them in an array. For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     var drawObj = {\n\t   *       ...\n\t   *       uniforms: [sharedUniforms, localUniforms],\n\t   *     };\n\t   *\n\t   * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n\t   * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Draws a list of objects\n\t   * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n\t   * @memberOf module:twgl/draw\n\t   */\n\t  function drawObjectList(gl, objectsToDraw) {\n\t    var lastUsedProgramInfo = null;\n\t    var lastUsedBufferInfo = null;\n\n\t    objectsToDraw.forEach(function (object) {\n\t      if (object.active === false) {\n\t        return;\n\t      }\n\n\t      var programInfo = object.programInfo;\n\t      var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n\t      var bindBuffers = false;\n\t      var type = object.type === undefined ? gl.TRIANGLES : object.type;\n\n\t      if (programInfo !== lastUsedProgramInfo) {\n\t        lastUsedProgramInfo = programInfo;\n\t        gl.useProgram(programInfo.program);\n\n\t        // We have to rebind buffers when changing programs because we\n\t        // only bind buffers the program uses. So if 2 programs use the same\n\t        // bufferInfo but the 1st one uses only positions the when the\n\t        // we switch to the 2nd one some of the attributes will not be on.\n\t        bindBuffers = true;\n\t      }\n\n\t      // Setup all the needed attributes.\n\t      if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n\t        if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n\t          gl.bindVertexArray(null);\n\t        }\n\t        lastUsedBufferInfo = bufferInfo;\n\t        programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t      }\n\n\t      // Set the uniforms.\n\t      programs.setUniforms(programInfo, object.uniforms);\n\n\t      // Draw\n\t      drawBufferInfo(gl, bufferInfo, type, object.count, object.offset);\n\t    });\n\n\t    if (lastUsedBufferInfo.vertexArrayObject) {\n\t      gl.bindVertexArray(null);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"drawBufferInfo\": drawBufferInfo,\n\t    \"drawObjectList\": drawObjectList\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader program related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.programs` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/programs\n\t   */\n\n\t  var error = utils.error;\n\t  var warn = utils.warn;\n\n\t  var FLOAT = 0x1406;\n\t  var FLOAT_VEC2 = 0x8B50;\n\t  var FLOAT_VEC3 = 0x8B51;\n\t  var FLOAT_VEC4 = 0x8B52;\n\t  var INT = 0x1404;\n\t  var INT_VEC2 = 0x8B53;\n\t  var INT_VEC3 = 0x8B54;\n\t  var INT_VEC4 = 0x8B55;\n\t  var BOOL = 0x8B56;\n\t  var BOOL_VEC2 = 0x8B57;\n\t  var BOOL_VEC3 = 0x8B58;\n\t  var BOOL_VEC4 = 0x8B59;\n\t  var FLOAT_MAT2 = 0x8B5A;\n\t  var FLOAT_MAT3 = 0x8B5B;\n\t  var FLOAT_MAT4 = 0x8B5C;\n\t  var SAMPLER_2D = 0x8B5E;\n\t  var SAMPLER_CUBE = 0x8B60;\n\t  var SAMPLER_3D = 0x8B5F;\n\t  var SAMPLER_2D_SHADOW = 0x8B62;\n\t  var FLOAT_MAT2x3 = 0x8B65;\n\t  var FLOAT_MAT2x4 = 0x8B66;\n\t  var FLOAT_MAT3x2 = 0x8B67;\n\t  var FLOAT_MAT3x4 = 0x8B68;\n\t  var FLOAT_MAT4x2 = 0x8B69;\n\t  var FLOAT_MAT4x3 = 0x8B6A;\n\t  var SAMPLER_2D_ARRAY = 0x8DC1;\n\t  var SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\n\t  var SAMPLER_CUBE_SHADOW = 0x8DC5;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var UNSIGNED_INT_VEC2 = 0x8DC6;\n\t  var UNSIGNED_INT_VEC3 = 0x8DC7;\n\t  var UNSIGNED_INT_VEC4 = 0x8DC8;\n\t  var INT_SAMPLER_2D = 0x8DCA;\n\t  var INT_SAMPLER_3D = 0x8DCB;\n\t  var INT_SAMPLER_CUBE = 0x8DCC;\n\t  var INT_SAMPLER_2D_ARRAY = 0x8DCF;\n\t  var UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\n\t  var UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\n\t  var UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\n\t  var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\n\t  var TEXTURE_2D = 0x0DE1;\n\t  var TEXTURE_CUBE_MAP = 0x8513;\n\t  var TEXTURE_3D = 0x806F;\n\t  var TEXTURE_2D_ARRAY = 0x8C1A;\n\n\t  var typeMap = {};\n\n\t  /**\n\t   * Returns the corresponding bind point for a given sampler type\n\t   */\n\t  function getBindPointForSamplerType(gl, type) {\n\t    return typeMap[type].bindPoint;\n\t  }\n\n\t  // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n\t  // this code could be a lot smaller but that is sadly really slow (T_T)\n\n\t  function floatSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1f(location, v);\n\t    };\n\t  }\n\n\t  function floatArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4fv(location, v);\n\t    };\n\t  }\n\n\t  function intSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1i(location, v);\n\t    };\n\t  }\n\n\t  function intArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4iv(location, v);\n\t    };\n\t  }\n\n\t  function uintSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1ui(location, v);\n\t    };\n\t  }\n\n\t  function uintArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4uiv(location, v);\n\t    };\n\t  }\n\n\t  function floatMat2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat23Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat32Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat24Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat42Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat34Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat43Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function samplerSetter(gl, type, unit, location) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    return function (texture) {\n\t      gl.uniform1i(location, unit);\n\t      gl.activeTexture(gl.TEXTURE0 + unit);\n\t      gl.bindTexture(bindPoint, texture);\n\t    };\n\t  }\n\n\t  function samplerArraySetter(gl, type, unit, location, size) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    var units = new Int32Array(size);\n\t    for (var ii = 0; ii < size; ++ii) {\n\t      units[ii] = unit + ii;\n\t    }\n\n\t    return function (textures) {\n\t      gl.uniform1iv(location, units);\n\t      textures.forEach(function (texture, index) {\n\t        gl.activeTexture(gl.TEXTURE0 + units[index]);\n\t        gl.bindTexture(bindPoint, texture);\n\t      });\n\t    };\n\t  }\n\n\t  typeMap[FLOAT] = { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter };\n\t  typeMap[FLOAT_VEC2] = { Type: Float32Array, size: 8, setter: floatVec2Setter };\n\t  typeMap[FLOAT_VEC3] = { Type: Float32Array, size: 12, setter: floatVec3Setter };\n\t  typeMap[FLOAT_VEC4] = { Type: Float32Array, size: 16, setter: floatVec4Setter };\n\t  typeMap[INT] = { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[INT_VEC2] = { Type: Int32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[INT_VEC3] = { Type: Int32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[INT_VEC4] = { Type: Int32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[UNSIGNED_INT] = { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter };\n\t  typeMap[UNSIGNED_INT_VEC2] = { Type: Uint32Array, size: 8, setter: uintVec2Setter };\n\t  typeMap[UNSIGNED_INT_VEC3] = { Type: Uint32Array, size: 12, setter: uintVec3Setter };\n\t  typeMap[UNSIGNED_INT_VEC4] = { Type: Uint32Array, size: 16, setter: uintVec4Setter };\n\t  typeMap[BOOL] = { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[BOOL_VEC2] = { Type: Uint32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[BOOL_VEC3] = { Type: Uint32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[BOOL_VEC4] = { Type: Uint32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[FLOAT_MAT2] = { Type: Float32Array, size: 16, setter: floatMat2Setter };\n\t  typeMap[FLOAT_MAT3] = { Type: Float32Array, size: 36, setter: floatMat3Setter };\n\t  typeMap[FLOAT_MAT4] = { Type: Float32Array, size: 64, setter: floatMat4Setter };\n\t  typeMap[FLOAT_MAT2x3] = { Type: Float32Array, size: 24, setter: floatMat23Setter };\n\t  typeMap[FLOAT_MAT2x4] = { Type: Float32Array, size: 32, setter: floatMat24Setter };\n\t  typeMap[FLOAT_MAT3x2] = { Type: Float32Array, size: 24, setter: floatMat32Setter };\n\t  typeMap[FLOAT_MAT3x4] = { Type: Float32Array, size: 48, setter: floatMat34Setter };\n\t  typeMap[FLOAT_MAT4x2] = { Type: Float32Array, size: 32, setter: floatMat42Setter };\n\t  typeMap[FLOAT_MAT4x3] = { Type: Float32Array, size: 48, setter: floatMat43Setter };\n\t  typeMap[SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[SAMPLER_2D_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_2D_ARRAY_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_CUBE_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\n\t  function floatAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function intAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function matAttribSetter(gl, index, typeInfo) {\n\t    var defaultSize = typeInfo.size;\n\t    var count = typeInfo.count;\n\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      var numComponents = b.size || b.numComponents || defaultSize;\n\t      var size = numComponents / count;\n\t      var type = b.type || gl.FLOAT;\n\t      var typeInfo = typeMap[type];\n\t      var stride = typeInfo.size * numComponents;\n\t      var normalize = b.normalize || false;\n\t      var offset = b.offset || 0;\n\t      var rowOffset = stride / count;\n\t      for (var i = 0; i < count; ++i) {\n\t        gl.enableVertexAttribArray(index + i);\n\t        gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\t      }\n\t    };\n\t  }\n\n\t  var attrTypeMap = {};\n\t  attrTypeMap[FLOAT] = { size: 4, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC2] = { size: 8, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC3] = { size: 12, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC4] = { size: 16, setter: floatAttribSetter };\n\t  attrTypeMap[INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[BOOL] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[FLOAT_MAT2] = { size: 4, setter: matAttribSetter, count: 2 };\n\t  attrTypeMap[FLOAT_MAT3] = { size: 9, setter: matAttribSetter, count: 3 };\n\t  attrTypeMap[FLOAT_MAT4] = { size: 16, setter: matAttribSetter, count: 4 };\n\n\t  // make sure we don't see a global gl\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /**\n\t   * Error Callback\n\t   * @callback ErrorCallback\n\t   * @param {string} msg error message.\n\t   * @param {number} [lineOffset] amount to add to line number\n\t   * @memberOf module:twgl\n\t   */\n\n\t  function addLineNumbers(src, lineOffset) {\n\t    lineOffset = lineOffset || 0;\n\t    ++lineOffset;\n\n\t    return src.split(\"\\n\").map(function (line, ndx) {\n\t      return ndx + lineOffset + \": \" + line;\n\t    }).join(\"\\n\");\n\t  }\n\n\t  var spaceRE = /^[ \\t]*\\n/;\n\n\t  /**\n\t   * Loads a shader.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} shaderSource The shader source.\n\t   * @param {number} shaderType The type of shader.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n\t   * @return {WebGLShader} The created shader.\n\t   */\n\t  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n\t    var errFn = opt_errorCallback || error;\n\t    // Create the shader object\n\t    var shader = gl.createShader(shaderType);\n\n\t    // Remove the first end of line because WebGL 2.0 requires\n\t    // #version 300 es\n\t    // as the first line. No whitespace allowed before that line\n\t    // so\n\t    //\n\t    // <script>\n\t    // #version 300 es\n\t    // </script>\n\t    //\n\t    // Has one line before it which is invalid according to GLSL ES 3.00\n\t    //\n\t    var lineOffset = 0;\n\t    if (spaceRE.test(shaderSource)) {\n\t      lineOffset = 1;\n\t      shaderSource = shaderSource.replace(spaceRE, '');\n\t    }\n\n\t    // Load the shader source\n\t    gl.shaderSource(shader, shaderSource);\n\n\t    // Compile the shader\n\t    gl.compileShader(shader);\n\n\t    // Check the compile status\n\t    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t    if (!compiled) {\n\t      // Something went wrong during compilation; get the error\n\t      var lastError = gl.getShaderInfoLog(shader);\n\t      errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n\t      gl.deleteShader(shader);\n\t      return null;\n\t    }\n\n\t    return shader;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramOptions\n\t   * @property {function(string)} [errorCallback] callback for errors\n\t   * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Gets the program options based on all these optional arguments\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on\n\t   */\n\t  function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n\t    if (typeof opt_locations === 'function') {\n\t      opt_errorCallback = opt_locations;\n\t      opt_locations = undefined;\n\t    }\n\t    if (typeof opt_attribs === 'function') {\n\t      opt_errorCallback = opt_attribs;\n\t      opt_attribs = undefined;\n\t    } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n\t      // If we have an errorCallback we can just return this object\n\t      // Otherwise we need to construct one with default errorCallback\n\t      if (opt_attribs.errorCallback) {\n\t        return opt_attribs;\n\t      }\n\t      var opt = opt_attribs;\n\t      opt_errorCallback = opt.errorCallback;\n\t      opt_attribs = opt.attribLocations;\n\t    }\n\n\t    var options = {\n\t      errorCallback: opt_errorCallback || error\n\t    };\n\n\t    if (opt_attribs) {\n\t      var attribLocations = {};\n\t      if (Array.isArray(opt_attribs)) {\n\t        opt_attribs.forEach(function (attrib, ndx) {\n\t          attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n\t        });\n\t      } else {\n\t        attribLocations = opt_attribs;\n\t      }\n\t      options.attribLocations = attribLocations;\n\t    }\n\n\t    return options;\n\t  }\n\n\t  /**\n\t   * Creates a program, attaches shaders, binds attrib locations, links the\n\t   * program and calls useProgram.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgram(gl, [vs, fs], options);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLShader[]} shaders The shaders to attach\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram?} the created program or null if error.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var program = gl.createProgram();\n\t    shaders.forEach(function (shader) {\n\t      gl.attachShader(program, shader);\n\t    });\n\t    if (progOptions.attribLocations) {\n\t      Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n\t        gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n\t      });\n\t    }\n\t    gl.linkProgram(program);\n\n\t    // Check the link status\n\t    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\t    if (!linked) {\n\t      // something went wrong with the link\n\t      var lastError = gl.getProgramInfoLog(program);\n\t      progOptions.errorCallback(\"Error in program linking:\" + lastError);\n\n\t      gl.deleteProgram(program);\n\t      return null;\n\t    }\n\t    return program;\n\t  }\n\n\t  /**\n\t   * Loads a shader from a script tag.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} scriptId The id of the script tag.\n\t   * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n\t   *     be derived from the type of the script tag.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n\t   * @return {WebGLShader?} The created shader or null if error.\n\t   */\n\t  function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n\t    var shaderSource = \"\";\n\t    var shaderType;\n\t    var shaderScript = document.getElementById(scriptId);\n\t    if (!shaderScript) {\n\t      throw \"*** Error: unknown script element\" + scriptId;\n\t    }\n\t    shaderSource = shaderScript.text;\n\n\t    if (!opt_shaderType) {\n\t      if (shaderScript.type === \"x-shader/x-vertex\") {\n\t        shaderType = gl.VERTEX_SHADER;\n\t      } else if (shaderScript.type === \"x-shader/x-fragment\") {\n\t        shaderType = gl.FRAGMENT_SHADER;\n\t      } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {\n\t        throw \"*** Error: unknown shader type\";\n\t      }\n\t    }\n\n\t    return loadShader(gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType, opt_errorCallback);\n\t  }\n\n\t  var defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\n\t  /**\n\t   * Creates a program from 2 script tags.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderScriptIds Array of ids of the script\n\t   *        tags for the shaders. The first is assumed to be the\n\t   *        vertex shader, the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n\t      var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates a program from 2 sources.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSourcess Array of sources for the\n\t   *        shaders. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderSources.length; ++ii) {\n\t      var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all uniforms of a shader\n\t   * program.\n\t   *\n\t   * @see {@link module:twgl.setUniforms}\n\t   *\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @returns {Object.<string, function>} an object with a setter by name for each uniform\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformSetters(gl, program) {\n\t    var textureUnit = 0;\n\n\t    /**\n\t     * Creates a setter for a uniform of the given program with it's\n\t     * location embedded in the setter.\n\t     * @param {WebGLProgram} program\n\t     * @param {WebGLUniformInfo} uniformInfo\n\t     * @returns {function} the created setter.\n\t     */\n\t    function createUniformSetter(program, uniformInfo) {\n\t      var location = gl.getUniformLocation(program, uniformInfo.name);\n\t      var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n\t      var type = uniformInfo.type;\n\t      var typeInfo = typeMap[type];\n\t      if (!typeInfo) {\n\t        throw \"unknown type: 0x\" + type.toString(16); // we should never get here.\n\t      }\n\t      if (typeInfo.bindPoint) {\n\t        // it's a sampler\n\t        var unit = textureUnit;\n\t        textureUnit += uniformInfo.size;\n\n\t        if (isArray) {\n\t          return typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n\t        } else {\n\t          return typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n\t        }\n\t      } else {\n\t        if (typeInfo.arraySetter && isArray) {\n\t          return typeInfo.arraySetter(gl, location);\n\t        } else {\n\t          return typeInfo.setter(gl, location);\n\t        }\n\t      }\n\t    }\n\n\t    var uniformSetters = {};\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      var name = uniformInfo.name;\n\t      // remove the array suffix.\n\t      if (name.substr(-3) === \"[0]\") {\n\t        name = name.substr(0, name.length - 3);\n\t      }\n\t      var setter = createUniformSetter(program, uniformInfo);\n\t      uniformSetters[name] = setter;\n\t    }\n\t    return uniformSetters;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} UniformData\n\t   * @property {number} type The WebGL type enum for this uniform\n\t   * @property {number} size The number of elements for this uniform\n\t   * @property {number} blockNdx The block index this uniform appears in\n\t   * @property {number} offset The byte offset in the block for this uniform's value\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * The specification for one UniformBlockObject\n\t   *\n\t   * @typedef {Object} BlockSpec\n\t   * @property {number} index The index of the block.\n\t   * @property {number} size The size in bytes needed for the block\n\t   * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n\t   *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n\t   * @property {bool} usedByVertexShader Self explanitory\n\t   * @property {bool} usedByFragmentShader Self explanitory\n\t   * @property {bool} used Self explanitory\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A `UniformBlockSpec` represents the data needed to create and bind\n\t   * UniformBlockObjects for a given program\n\t   *\n\t   * @typedef {Object} UniformBlockSpec\n\t   * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n\t   * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a UniformBlockSpec for the given program.\n\t   *\n\t   * A UniformBlockSpec represents the data needed to create and bind\n\t   * UniformBlockObjects\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n\t   * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n\t   * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockSpecFromProgram(gl, program) {\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\t    var uniformData = [];\n\t    var uniformIndices = [];\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      uniformIndices.push(ii);\n\t      uniformData.push({});\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      // REMOVE [0]?\n\t      uniformData[ii].name = uniformInfo.name;\n\t    }\n\n\t    [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n\t    [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n\t      var pname = pair[0];\n\t      var key = pair[1];\n\t      gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n\t        uniformData[ndx][key] = value;\n\t      });\n\t    });\n\n\t    var blockSpecs = {};\n\n\t    var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\t    for (ii = 0; ii < numUniformBlocks; ++ii) {\n\t      var name = gl.getActiveUniformBlockName(program, ii);\n\t      var blockSpec = {\n\t        index: ii,\n\t        usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n\t        usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n\t        size: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_DATA_SIZE),\n\t        uniformIndices: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n\t      };\n\t      blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;\n\t      blockSpecs[name] = blockSpec;\n\t    }\n\n\t    return {\n\t      blockSpecs: blockSpecs,\n\t      uniformData: uniformData\n\t    };\n\t  }\n\n\t  var arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\n\t  /**\n\t   * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n\t   * and a corresponding WebGLBuffer to hold those values on the GPU\n\t   *\n\t   * @typedef {Object} UniformBlockInfo\n\t   * @property {string} name The name of the block\n\t   * @property {ArrayBuffer} array The array buffer that contains the uniform values\n\t   * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n\t   *    inspecting the contents of the buffer in the debugger.\n\t   * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n\t   * @property {number} [offset] offset into buffer\n\t   * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n\t   *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n\t   *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n\t   *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n\t   *   `Int32Array` view, etc.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {WebGLProgram} program A WebGLProgram\n\t   * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned\n\t   *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n\t    var blockSpecs = uniformBlockSpec.blockSpecs;\n\t    var uniformData = uniformBlockSpec.uniformData;\n\t    var blockSpec = blockSpecs[blockName];\n\t    if (!blockSpec) {\n\t      warn(\"no uniform block object named:\", blockName);\n\t      return {\n\t        name: blockName,\n\t        uniforms: {}\n\t      };\n\t    }\n\t    var array = new ArrayBuffer(blockSpec.size);\n\t    var buffer = gl.createBuffer();\n\t    var uniformBufferIndex = blockSpec.index;\n\t    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n\t    gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n\t    var prefix = blockName + \".\";\n\t    if (arraySuffixRE.test(prefix)) {\n\t      prefix = prefix.replace(arraySuffixRE, \".\");\n\t    }\n\t    var uniforms = {};\n\t    blockSpec.uniformIndices.forEach(function (uniformNdx) {\n\t      var data = uniformData[uniformNdx];\n\t      var typeInfo = typeMap[data.type];\n\t      var Type = typeInfo.Type;\n\t      var length = data.size * typeInfo.size;\n\t      var name = data.name;\n\t      if (name.substr(0, prefix.length) === prefix) {\n\t        name = name.substr(prefix.length);\n\t      }\n\t      uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n\t    });\n\t    return {\n\t      name: blockName,\n\t      array: array,\n\t      asFloat: new Float32Array(array), // for debugging\n\t      buffer: buffer,\n\t      uniforms: uniforms\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo}\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfo(gl, programInfo, blockName) {\n\t    return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n\t  }\n\n\t  /**\n\t   * Binds a unform block to the matching uniform block point.\n\t   * Matches by blocks by name so blocks must have the same name not just the same\n\t   * structure.\n\t   *\n\t   * If you have changed any values and you upload the valus into the corresponding WebGLBuffer\n\t   * call {@link module:twgl.setUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n\t   *     no buffer is bound.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n\t    var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\t    if (blockSpec) {\n\t      var bufferBindIndex = blockSpec.index;\n\t      gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Uploads the current uniform values to the corresponding WebGLBuffer\n\t   * and binds that buffer to the program's corresponding bind point for the uniform block object.\n\t   *\n\t   * If you haven't changed any values and you only need to bind the uniform block object\n\t   * call {@link module:twgl.bindUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n\t      gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets values of a uniform block object\n\t   *\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n\t   * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n\t   *    type of uniform. So for example given a block like\n\t   *\n\t   *       uniform SomeBlock {\n\t   *         float someFloat;\n\t   *         vec2 someVec2;\n\t   *         vec3 someVec3Array[2];\n\t   *         int someInt;\n\t   *       }\n\t   *\n\t   *  You can set the values of the uniform block with\n\t   *\n\t   *       twgl.setBlockUniforms(someBlockInfo, {\n\t   *          someFloat: 12.3,\n\t   *          someVec2: [1, 2],\n\t   *          someVec3Array: [1, 2, 3, 4, 5, 6],\n\t   *          someInt: 5,\n\t   *       }\n\t   *\n\t   *  Arrays can be JavaScript arrays or typed arrays\n\t   *\n\t   *  Any name that doesn't match will be ignored\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBlockUniforms(uniformBlockInfo, values) {\n\t    var uniforms = uniformBlockInfo.uniforms;\n\t    for (var name in values) {\n\t      var array = uniforms[name];\n\t      if (array) {\n\t        var value = values[name];\n\t        if (value.length) {\n\t          array.set(value);\n\t        } else {\n\t          array[0] = value;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set uniforms and binds related textures.\n\t   *\n\t   * example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\"]);\n\t   *\n\t   *     var tex1 = gl.createTexture();\n\t   *     var tex2 = gl.createTexture();\n\t   *\n\t   *     ... assume we setup the textures with data ...\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the textures AND set the\n\t   * uniforms.\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *\n\t   * For the example above it is equivalent to\n\t   *\n\t   *     var texUnit = 0;\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n\t   *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n\t   *     gl.uniformMatrix4fv(u_someMatrix, false, [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ]);\n\t   *\n\t   * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *     };\n\t   *\n\t   *     var moreUniforms {\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *     twgl.setUniforms(programInfo, moreUniforms);\n\t   *\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n\t   *        `createUniformSetters`.\n\t   * @param {Object.<string, ?>} values an object with values for the\n\t   *        uniforms.\n\t   *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms);\n\t   *     twgl.setUniforms(programInfo, localUniforms};\n\t   *\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniforms(setters, values) {\n\t    // eslint-disable-line\n\t    var actualSetters = setters.uniformSetters || setters;\n\t    var numArgs = arguments.length;\n\t    for (var andx = 1; andx < numArgs; ++andx) {\n\t      var vals = arguments[andx];\n\t      if (Array.isArray(vals)) {\n\t        var numValues = vals.length;\n\t        for (var ii = 0; ii < numValues; ++ii) {\n\t          setUniforms(actualSetters, vals[ii]);\n\t        }\n\t      } else {\n\t        for (var name in vals) {\n\t          var setter = actualSetters[name];\n\t          if (setter) {\n\t            setter(vals[name]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all attributes of a shader\n\t   * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n\t   *\n\t   * @see {@link module:twgl.setAttributes} for example\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @return {Object.<string, function>} an object with a setter for each attribute by name.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createAttributeSetters(gl, program) {\n\t    var attribSetters = {};\n\n\t    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\t    for (var ii = 0; ii < numAttribs; ++ii) {\n\t      var attribInfo = gl.getActiveAttrib(program, ii);\n\t      if (!attribInfo) {\n\t        break;\n\t      }\n\t      var index = gl.getAttribLocation(program, attribInfo.name);\n\t      var typeInfo = attrTypeMap[attribInfo.type];\n\t      attribSetters[attribInfo.name] = typeInfo.setter(gl, index, typeInfo);\n\t    }\n\n\t    return attribSetters;\n\t  }\n\n\t  /**\n\t   * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n\t   *\n\t   * Example:\n\t   *\n\t   *     var program = createProgramFromScripts(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var attribSetters = createAttributeSetters(program);\n\t   *\n\t   *     var positionBuffer = gl.createBuffer();\n\t   *     var texcoordBuffer = gl.createBuffer();\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setAttributes(attribSetters, attribs);\n\t   *\n\t   * Properties of attribs. For each attrib you can add\n\t   * properties:\n\t   *\n\t   * *   type: the type of data in the buffer. Default = gl.FLOAT\n\t   * *   normalize: whether or not to normalize the data. Default = false\n\t   * *   stride: the stride. Default = 0\n\t   * *   offset: offset into the buffer. Default = 0\n\t   *\n\t   * For example if you had 3 value float positions, 2 value\n\t   * float texcoord and 4 value uint8 colors you'd setup your\n\t   * attribs like this\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *       a_color: {\n\t   *         buffer: colorBuffer,\n\t   *         numComponents: 4,\n\t   *         type: gl.UNSIGNED_BYTE,\n\t   *         normalize: true,\n\t   *       },\n\t   *     };\n\t   *\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n\t   * @memberOf module:twgl/programs\n\t   * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n\t   */\n\t  function setAttributes(setters, buffers) {\n\t    for (var name in buffers) {\n\t      var setter = setters[name];\n\t      if (setter) {\n\t        setter(buffers[name]);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n\t   *\n\t   * Example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *     };\n\t   *\n\t   *     var bufferInfo = createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *     gl.useProgram(programInfo.program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t   *\n\t   * For the example above it is equivilent to\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\t   *     gl.enableVertexAttribArray(a_positionLocation);\n\t   *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n\t   *     gl.enableVertexAttribArray(a_texcoordLocation);\n\t   *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n\t   * @param {(module:twgl.BufferInfo|module:twgl.vertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n\t   *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBuffersAndAttributes(gl, programInfo, buffers) {\n\t    if (buffers.vertexArrayObject) {\n\t      gl.bindVertexArray(buffers.vertexArrayObject);\n\t    } else {\n\t      setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\t      if (buffers.indices) {\n\t        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramInfo\n\t   * @property {WebGLProgram} program A shader program\n\t   * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n\t   * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a ProgramInfo from an existing program.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {WebGLProgram} program an existing WebGLProgram.\n\t   * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfoFromProgram(gl, program) {\n\t    var uniformSetters = createUniformSetters(gl, program);\n\t    var attribSetters = createAttributeSetters(gl, program);\n\t    var programInfo = {\n\t      program: program,\n\t      uniformSetters: uniformSetters,\n\t      attribSetters: attribSetters\n\t    };\n\n\t    if (utils.isWebGL2(gl)) {\n\t      programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n\t    }\n\n\t    return programInfo;\n\t  }\n\n\t  /**\n\t   * Creates a ProgramInfo from 2 sources.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramInfo(gl, [vs, fs], options);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSourcess Array of sources for the\n\t   *        shaders or ids. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the attributes. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var good = true;\n\t    shaderSources = shaderSources.map(function (source) {\n\t      // Lets assume if there is no \\n it's an id\n\t      if (source.indexOf(\"\\n\") < 0) {\n\t        var script = document.getElementById(source);\n\t        if (!script) {\n\t          progOptions.errorCallback(\"no element with id: \" + source);\n\t          good = false;\n\t        } else {\n\t          source = script.text;\n\t        }\n\t      }\n\t      return source;\n\t    });\n\t    if (!good) {\n\t      return null;\n\t    }\n\t    var program = createProgramFromSources(gl, shaderSources, progOptions);\n\t    if (!program) {\n\t      return null;\n\t    }\n\t    return createProgramInfoFromProgram(gl, program);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttributeSetters\": createAttributeSetters,\n\n\t    \"createProgram\": createProgram,\n\t    \"createProgramFromScripts\": createProgramFromScripts,\n\t    \"createProgramFromSources\": createProgramFromSources,\n\t    \"createProgramInfo\": createProgramInfo,\n\t    \"createProgramInfoFromProgram\": createProgramInfoFromProgram,\n\t    \"createUniformSetters\": createUniformSetters,\n\t    \"createUniformBlockSpecFromProgram\": createUniformBlockSpecFromProgram,\n\t    \"createUniformBlockInfoFromProgram\": createUniformBlockInfoFromProgram,\n\t    \"createUniformBlockInfo\": createUniformBlockInfo,\n\n\t    \"setAttributes\": setAttributes,\n\t    \"setBuffersAndAttributes\": setBuffersAndAttributes,\n\t    \"setUniforms\": setUniforms,\n\t    \"setUniformBlock\": setUniformBlock,\n\t    \"setBlockUniforms\": setBlockUniforms,\n\t    \"bindUniformBlock\": bindUniformBlock\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (textures, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Framebuffer related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/framebuffers\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  var UNSIGNED_BYTE = 0x1401;\n\n\t  /* PixelFormat */\n\t  var DEPTH_COMPONENT = 0x1902;\n\t  var RGBA = 0x1908;\n\n\t  /* Framebuffer Object. */\n\t  var RGBA4 = 0x8056;\n\t  var RGB5_A1 = 0x8057;\n\t  var RGB565 = 0x8D62;\n\t  var DEPTH_COMPONENT16 = 0x81A5;\n\t  var STENCIL_INDEX = 0x1901;\n\t  var STENCIL_INDEX8 = 0x8D48;\n\t  var DEPTH_STENCIL = 0x84F9;\n\t  var COLOR_ATTACHMENT0 = 0x8CE0;\n\t  var DEPTH_ATTACHMENT = 0x8D00;\n\t  var STENCIL_ATTACHMENT = 0x8D20;\n\t  var DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var CLAMP_TO_EDGE = 0x812F;\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\t  var LINEAR = 0x2601;\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  /**\n\t   * The options for a framebuffer attachment.\n\t   *\n\t   * Note: For a `format` that is a texture include all the texture\n\t   * options from {@link module:twgl.TextureOptions} for example\n\t   * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n\t   * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n\t   * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n\t   *\n\t   * @typedef {Object} AttachmentOptions\n\t   * @property {number} [attach] The attachment point. Defaults\n\t   *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type\n\t   *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n\t   *   on the format or attachment type.\n\t   * @property {number} [format] The format. If one of `gl.RGBA4`,\n\t   *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n\t   *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n\t   *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n\t   * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n\t   * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n\t   *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n\t   * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n\t   * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n\t   *    If provided will attach this Object. This allows you to share\n\t   *    attachemnts across framebuffers.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  var defaultAttachments = [{ format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE }, { format: DEPTH_STENCIL }];\n\n\t  var attachmentsByFormat = {};\n\t  attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\n\t  function getAttachmentPointForFormat(format) {\n\t    return attachmentsByFormat[format];\n\t  }\n\n\t  var renderbufferFormats = {};\n\t  renderbufferFormats[RGBA4] = true;\n\t  renderbufferFormats[RGB5_A1] = true;\n\t  renderbufferFormats[RGB565] = true;\n\t  renderbufferFormats[DEPTH_STENCIL] = true;\n\t  renderbufferFormats[DEPTH_COMPONENT16] = true;\n\t  renderbufferFormats[STENCIL_INDEX] = true;\n\t  renderbufferFormats[STENCIL_INDEX8] = true;\n\n\t  function isRenderbufferFormat(format) {\n\t    return renderbufferFormats[format];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FramebufferInfo\n\t   * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n\t   * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a framebuffer and attachments.\n\t   *\n\t   * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   * Passing in a specific size\n\t   *\n\t   *     var width = 256;\n\t   *     var height = 256;\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n\t   *\n\t   * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n\t   * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n\t   *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function createFramebufferInfo(gl, attachments, width, height) {\n\t    var target = gl.FRAMEBUFFER;\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(target, fb);\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    attachments = attachments || defaultAttachments;\n\t    var colorAttachmentCount = 0;\n\t    var framebufferInfo = {\n\t      framebuffer: fb,\n\t      attachments: [],\n\t      width: width,\n\t      height: height\n\t    };\n\t    attachments.forEach(function (attachmentOptions) {\n\t      var attachment = attachmentOptions.attachment;\n\t      var format = attachmentOptions.format;\n\t      var attachmentPoint = getAttachmentPointForFormat(format);\n\t      if (!attachmentPoint) {\n\t        attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n\t      }\n\t      if (!attachment) {\n\t        if (isRenderbufferFormat(format)) {\n\t          attachment = gl.createRenderbuffer();\n\t          gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t          gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t        } else {\n\t          var textureOptions = utils.shallowCopy(attachmentOptions);\n\t          textureOptions.width = width;\n\t          textureOptions.height = height;\n\t          if (textureOptions.auto === undefined) {\n\t            textureOptions.auto = false;\n\t            textureOptions.min = textureOptions.min || gl.LINEAR;\n\t            textureOptions.mag = textureOptions.mag || gl.LINEAR;\n\t            textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t            textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t          }\n\t          attachment = textures.createTexture(gl, textureOptions);\n\t        }\n\t      }\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t      framebufferInfo.attachments.push(attachment);\n\t    });\n\t    return framebufferInfo;\n\t  }\n\n\t  /**\n\t   * Resizes the attachments of a framebuffer.\n\t   *\n\t   * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n\t   * because TWGL has no idea the format/type of each attachment.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments\n\t   *         twgl.resizeFramebufferInfo(gl, fbi);\n\t   *       }\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments to match\n\t   *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n\t   *       }\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    framebufferInfo.width = width;\n\t    framebufferInfo.height = height;\n\t    attachments = attachments || defaultAttachments;\n\t    attachments.forEach(function (attachmentOptions, ndx) {\n\t      var attachment = framebufferInfo.attachments[ndx];\n\t      var format = attachmentOptions.format;\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Binds a framebuffer\n\t   *\n\t   * This function pretty much soley exists because I spent hours\n\t   * trying to figure out why something I wrote wasn't working only\n\t   * to realize I forget to set the viewport dimensions.\n\t   * My hope is this function will fix that.\n\t   *\n\t   * It is effectively the same as\n\t   *\n\t   *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n\t   *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   *   If not passed will bind the canvas.\n\t   * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\n\t  function bindFramebufferInfo(gl, framebufferInfo, target) {\n\t    target = target || gl.FRAMEBUFFER;\n\t    if (framebufferInfo) {\n\t      gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n\t      gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n\t    } else {\n\t      gl.bindFramebuffer(target, null);\n\t      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"bindFramebufferInfo\": bindFramebufferInfo,\n\t    \"createFramebufferInfo\": createFramebufferInfo,\n\t    \"resizeFramebufferInfo\": resizeFramebufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level texture related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.textures` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/textures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    textureColor: new Uint8Array([128, 192, 255, 255]),\n\t    textureOptions: {},\n\t    crossOrigin: undefined\n\t  };\n\t  var isArrayBuffer = typedArrays.isArrayBuffer;\n\n\t  /* PixelFormat */\n\t  var ALPHA = 0x1906;\n\t  var RGB = 0x1907;\n\t  var RGBA = 0x1908;\n\t  var LUMINANCE = 0x1909;\n\t  var LUMINANCE_ALPHA = 0x190A;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  /**\n\t   * Sets the default texture color.\n\t   *\n\t   * The default texture color is used when loading textures from\n\t   * urls. Because the URL will be loaded async we'd like to be\n\t   * able to use the texture immediately. By putting a 1x1 pixel\n\t   * color in the texture we can start using the texture before\n\t   * the URL has loaded.\n\t   *\n\t   * @param {number[]} color Array of 4 values in the range 0 to 1\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setDefaultTextureColor(color) {\n\t    defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    if (newDefaults.textureColor) {\n\t      setDefaultTextureColor(newDefaults.textureColor);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets a string for gl enum\n\t   *\n\t   * Note: Several enums are the same. Without more\n\t   * context (which function) it's impossible to always\n\t   * give the correct enum.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {number} value the value of the enum you want to look up.\n\t   */\n\t  var glEnumToString = function () {\n\t    var enums;\n\n\t    function init(gl) {\n\t      if (!enums) {\n\t        enums = {};\n\t        Object.keys(gl).forEach(function (key) {\n\t          if (typeof gl[key] === 'number') {\n\t            enums[gl[key]] = key;\n\t          }\n\t        });\n\t      }\n\t    }\n\n\t    return function glEnumToString(gl, value) {\n\t      init();\n\t      return enums[value] || \"0x\" + value.toString(16);\n\t    };\n\t  }();\n\n\t  /**\n\t   * A function to generate the source for a texture.\n\t   * @callback TextureFunc\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options the texture options\n\t   * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Texture options passed to most texture functions. Each function will use whatever options\n\t   * are appropriate for its needs. This lets you pass the same options to all functions.\n\t   *\n\t   * @typedef {Object} TextureOptions\n\t   * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n\t   * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n\t   * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n\t   *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n\t   * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n\t   * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n\t   * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n\t   * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBuffer. If `src`\n\t   *     is ArrayBuffer defaults to type that matches ArrayBuffer type.\n\t   * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n\t   * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [minLod] TEXTURE_MIN_LOD setting\n\t   * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n\t   * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n\t   * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n\t   * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n\t   * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {(number[]|ArrayBuffer)} color color used as temporary 1x1 pixel color for textures loaded async when src is a string.\n\t   *    If it's a JavaScript array assumes color is 0 to 1 like most GL colors as in `[1, 0, 0, 1] = red=1, green=0, blue=0, alpha=0`.\n\t   *    Defaults to `[0.5, 0.75, 1, 1]`. See {@link module:twgl.setDefaultTextureColor}. If `false` texture is set. Can be used to re-load a texture\n\t   * @property {boolean} [auto] If not `false` then texture working filtering is set automatically for non-power of 2 images and\n\t   *    mips are generated for power of 2 images.\n\t   * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n\t   *\n\t   *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n\t   *\n\t   * @property {(number[]|ArrayBuffer|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n\t   *\n\t   *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n\t   *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.\n\t   *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n\t   *    The pieces will be uploaded in `cubeFaceOrder`\n\t   *\n\t   *    If `string[]` then it must have 6 entries, one for each face of a cube map. Target must be `gl.TEXTURE_CUBE_MAP`.\n\t   *\n\t   *    If `HTMLElement` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n\t   *    `HTMLCanvasElement`, `HTMLVideoElement`.\n\t   *\n\t   *    If `number[]` or `ArrayBuffer` it's assumed to be data for a texture. If `width` or `height` is\n\t   *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponets`\n\t   *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n\t   *    by 6. Then\n\t   *\n\t   *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n\t   *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n\t   *\n\t   *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n\t   *\n\t   * If `number[]` will be converted to `type`.\n\t   *\n\t   * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n\t   * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n\t   * an array etc...\n\t   *\n\t   * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n\t   *\n\t   * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n\t   *    default: undefined. Also see {@link module:twgl.setDefaults}.\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  // NOTE: While querying GL is considered slow it's not remotely as slow\n\t  // as uploading a texture. On top of that you're unlikely to call this in\n\t  // a perf critical loop. Even if upload a texture every frame that's unlikely\n\t  // to be more than 1 or 2 textures a frame. In other words, the benefits of\n\t  // making the API easy to use outweigh any supposed perf benefits\n\t  var lastPackState = {};\n\n\t  /**\n\t   * Saves any packing state that will be set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function savePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);\n\t    }\n\t  }\n\n\t  /**\n\t   * Restores any packing state that was set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function restorePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets the texture parameters of a texture.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureParameters(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    if (options.min) {\n\t      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, options.min);\n\t    }\n\t    if (options.mag) {\n\t      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, options.mag);\n\t    }\n\t    if (options.wrap) {\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, options.wrap);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, options.wrap);\n\t      if (target === gl.TEXTURE_3D) {\n\t        gl.texParameteri(target, gl.TEXTURE_WRAP_R, options.wrap);\n\t      }\n\t    }\n\t    if (options.wrapR) {\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_R, options.wrapR);\n\t    }\n\t    if (options.wrapS) {\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, options.wrapS);\n\t    }\n\t    if (options.wrapT) {\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, options.wrapT);\n\t    }\n\t    if (options.minLod) {\n\t      gl.texParameteri(target, gl.TEXTURE_MIN_LOD, options.minLod);\n\t    }\n\t    if (options.maxLod) {\n\t      gl.texParameteri(target, gl.TEXTURE_MAX_LOD, options.maxLod);\n\t    }\n\t    if (options.baseLevel) {\n\t      gl.texParameteri(target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);\n\t    }\n\t    if (options.maxLevel) {\n\t      gl.texParameteri(target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);\n\t    }\n\t  }\n\n\t  /**\n\t   * Makes a 1x1 pixel\n\t   * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n\t   * @param {(number[]|ArrayBuffer)} [color] The color using 0-1 values\n\t   * @return {Uint8Array} Unit8Array with color.\n\t   */\n\t  function make1Pixel(color) {\n\t    color = color || defaults.textureColor;\n\t    if (isArrayBuffer(color)) {\n\t      return color;\n\t    }\n\t    return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  /**\n\t   * Returns true if value is power of 2\n\t   * @param {number} value number to check.\n\t   * @return true if value is power of 2\n\t   */\n\t  function isPowerOf2(value) {\n\t    return (value & value - 1) === 0;\n\t  }\n\n\t  /**\n\t   * Sets filtering or generates mips for texture based on width or height\n\t   * If width or height is not passed in uses `options.width` and//or `options.height`\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @param {number} [width] width of texture\n\t   * @param {number} [height] height of texture\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFilteringForSize(gl, tex, options, width, height) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    gl.bindTexture(target, tex);\n\t    if (!isPowerOf2(width) || !isPowerOf2(height)) {\n\t      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    } else {\n\t      gl.generateMipmap(target);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets an array of cubemap face enums\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @return {number[]} cubemap face enums\n\t   */\n\t  function getCubeFaceOrder(gl, options) {\n\t    options = options || {};\n\t    return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FaceInfo\n\t   * @property {number} face gl enum for texImage2D\n\t   * @property {number} ndx face index (0 - 5) into source data\n\t   * @ignore\n\t   */\n\n\t  /**\n\t   * Gets an array of FaceInfos\n\t   * There's a bug in some NVidia drivers that will crash the driver if\n\t   * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n\t   * the user's desired order from his faces to WebGL and make sure we\n\t   * do the faces in WebGL order\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but\n\t   *    it's needed internally to sort the array of `ndx` properties by `face`.\n\t   */\n\t  function getCubeFacesWithNdx(gl, options) {\n\t    var faces = getCubeFaceOrder(gl, options);\n\t    // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\t    var facesWithNdx = faces.map(function (face, ndx) {\n\t      return { face: face, ndx: ndx };\n\t    });\n\t    facesWithNdx.sort(function (a, b) {\n\t      return a.face - b.face;\n\t    });\n\t    return facesWithNdx;\n\t  }\n\n\t  /**\n\t   * Set a texture from the contents of an element. Will also set\n\t   * texture filtering or generate mips based on the dimensions of the element\n\t   * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n\t   * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {HTMLElement} element a canvas, img, or video element.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   * @kind function\n\t   */\n\t  var setTextureFromElement = function () {\n\t    var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n\t    return function setTextureFromElement(gl, tex, element, options) {\n\t      options = options || defaults.textureOptions;\n\t      var target = options.target || gl.TEXTURE_2D;\n\t      var width = element.width;\n\t      var height = element.height;\n\t      var format = options.format || gl.RGBA;\n\t      var internalFormat = options.internalFormat || format;\n\t      var type = options.type || gl.UNSIGNED_BYTE;\n\t      savePackState(gl, options);\n\t      gl.bindTexture(target, tex);\n\t      if (target === gl.TEXTURE_CUBE_MAP) {\n\t        // guess the parts\n\t        var imgWidth = element.width;\n\t        var imgHeight = element.height;\n\t        var size;\n\t        var slices;\n\t        if (imgWidth / 6 === imgHeight) {\n\t          // It's 6x1\n\t          size = imgHeight;\n\t          slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n\t        } else if (imgHeight / 6 === imgWidth) {\n\t          // It's 1x6\n\t          size = imgWidth;\n\t          slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n\t        } else if (imgWidth / 3 === imgHeight / 2) {\n\t          // It's 3x2\n\t          size = imgWidth / 3;\n\t          slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n\t        } else if (imgWidth / 2 === imgHeight / 3) {\n\t          // It's 2x3\n\t          size = imgWidth / 2;\n\t          slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n\t        } else {\n\t          throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n\t        }\n\t        ctx.canvas.width = size;\n\t        ctx.canvas.height = size;\n\t        width = size;\n\t        height = size;\n\t        getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t          var xOffset = slices[f.ndx * 2 + 0] * size;\n\t          var yOffset = slices[f.ndx * 2 + 1] * size;\n\t          ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n\t          gl.texImage2D(f.face, 0, internalFormat, format, type, ctx.canvas);\n\t        });\n\t        // Free up the canvas memory\n\t        ctx.canvas.width = 1;\n\t        ctx.canvas.height = 1;\n\t      } else if (target === gl.TEXTURE_3D) {\n\t        var smallest = Math.min(element.width, element.height);\n\t        var largest = Math.max(element.width, element.height);\n\t        var depth = largest / smallest;\n\t        if (depth % 1 !== 0) {\n\t          throw \"can not compute 3D dimensions of element\";\n\t        }\n\t        var xMult = element.width === largest ? 1 : 0;\n\t        var yMult = element.height === largest ? 1 : 0;\n\t        gl.texImage3D(target, 0, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\t        // remove this is texSubImage3D gets width and height arguments\n\t        ctx.canvas.width = smallest;\n\t        ctx.canvas.height = smallest;\n\t        for (var d = 0; d < depth; ++d) {\n\t          //          gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, d * smallest);\n\t          //          gl.texSubImage3D(target, 0, 0, 0, d, format, type, element);\n\t          var srcX = d * smallest * xMult;\n\t          var srcY = d * smallest * yMult;\n\t          var srcW = smallest;\n\t          var srcH = smallest;\n\t          var dstX = 0;\n\t          var dstY = 0;\n\t          var dstW = smallest;\n\t          var dstH = smallest;\n\t          ctx.drawImage(element, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);\n\t          gl.texSubImage3D(target, 0, 0, 0, d, format, type, ctx.canvas);\n\t        }\n\t        ctx.canvas.width = 0;\n\t        ctx.canvas.height = 0;\n\t        // FIX (save state)\n\t        //        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);\n\t      } else {\n\t        gl.texImage2D(target, 0, internalFormat, format, type, element);\n\t      }\n\t      restorePackState(gl, options);\n\t      if (options.auto !== false) {\n\t        setTextureFilteringForSize(gl, tex, options, width, height);\n\t      }\n\t      setTextureParameters(gl, tex, options);\n\t    };\n\t  }();\n\n\t  function noop() {}\n\n\t  /**\n\t   * Loads an image\n\t   * @param {string} url url to image\n\t   * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n\t   *     if there was an error\n\t   * @return {HTMLImageElement} the image being loaded.\n\t   */\n\t  function loadImage(url, crossOrigin, callback) {\n\t    callback = callback || noop;\n\t    var img = new Image();\n\t    crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n\t    if (crossOrigin !== undefined) {\n\t      img.crossOrigin = crossOrigin;\n\t    }\n\n\t    function clearEventHandlers() {\n\t      img.removeEventListener('error', onError); // eslint-disable-line\n\t      img.removeEventListener('load', onLoad); // eslint-disable-line\n\t      img = null;\n\t    }\n\n\t    function onError() {\n\t      var msg = \"couldn't load image: \" + url;\n\t      utils.error(msg);\n\t      callback(msg, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    function onLoad() {\n\t      callback(null, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    img.addEventListener('error', onError);\n\t    img.addEventListener('load', onLoad);\n\t    img.src = url;\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n\t   * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureTo1PixelColor(gl, tex, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    if (options.color === false) {\n\t      return;\n\t    }\n\t    // Assume it's a URL\n\t    // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\t    var color = make1Pixel(options.color);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    } else {\n\t      gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    }\n\t  }\n\n\t  /**\n\t   * The src image(s) used to create a texture.\n\t   *\n\t   * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n\t   * you can pass in urls for images to load into the textures. If it's a single url\n\t   * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n\t   * this will be a corresponding array of images for the cubemap.\n\t   *\n\t   * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback TextureReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} texture the texture.\n\t   * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when all images have finished downloading and been uploaded into their respective textures\n\t   * @callback TexturesReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n\t   * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback CubemapReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} tex the texture.\n\t   * @param {HTMLImageElement[]} imgs the images for each face.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Loads a texture from an image from a Url as specified in `options.src`\n\t   * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n\t   * immediately useable. It will be updated with the contents of the image once the image has finished\n\t   * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @return {HTMLImageElement} the image being downloaded.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadTextureFromUrl(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var img = loadImage(options.src, options.crossOrigin, function (err, img) {\n\t      if (err) {\n\t        callback(err, tex, img);\n\t      } else {\n\t        setTextureFromElement(gl, tex, img, options);\n\t        callback(null, tex, img);\n\t      }\n\t    });\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Loads a cubemap from 6 urls as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n\t   * so that it is usable immediately unless `option.color === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadCubemapFromUrls(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    var urls = options.src;\n\t    if (urls.length !== 6) {\n\t      throw \"there must be 6 urls for a cubemap\";\n\t    }\n\t    var format = options.format || gl.RGBA;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    if (target !== gl.TEXTURE_CUBE_MAP) {\n\t      throw \"target must be TEXTURE_CUBE_MAP\";\n\t    }\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var numToLoad = 6;\n\t    var errors = [];\n\t    var imgs;\n\t    var faces = getCubeFaceOrder(gl, options);\n\n\t    function uploadImg(faceTarget) {\n\t      return function (err, img) {\n\t        --numToLoad;\n\t        if (err) {\n\t          errors.push(err);\n\t        } else {\n\t          if (img.width !== img.height) {\n\t            errors.push(\"cubemap face img is not a square: \" + img.src);\n\t          } else {\n\t            savePackState(gl, options);\n\t            gl.bindTexture(target, tex);\n\n\t            // So assuming this is the first image we now have one face that's img sized\n\t            // and 5 faces that are 1x1 pixel so size the other faces\n\t            if (numToLoad === 5) {\n\t              // use the default order\n\t              getCubeFaceOrder(gl).forEach(function (otherTarget) {\n\t                // Should we re-use the same face or a color?\n\t                gl.texImage2D(otherTarget, 0, format, format, type, img);\n\t              });\n\t            } else {\n\t              gl.texImage2D(faceTarget, 0, format, format, type, img);\n\t            }\n\n\t            restorePackState(gl, options);\n\t            gl.generateMipmap(target);\n\t          }\n\t        }\n\n\t        if (numToLoad === 0) {\n\t          callback(errors.length ? errors : undefined, imgs, tex);\n\t        }\n\t      };\n\t    }\n\n\t    imgs = urls.map(function (url, ndx) {\n\t      return loadImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n\t    });\n\t  }\n\n\t  /**\n\t   * Gets the number of compontents for a given image format.\n\t   * @param {number} format the format.\n\t   * @return {number} the number of components for the format.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function getNumComponentsForFormat(format) {\n\t    switch (format) {\n\t      case ALPHA:\n\t      case LUMINANCE:\n\t        return 1;\n\t      case LUMINANCE_ALPHA:\n\t        return 2;\n\t      case RGB:\n\t        return 3;\n\t      case RGBA:\n\t        return 4;\n\t      default:\n\t        throw \"unknown type: \" + format;\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets the texture type for a given array type.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @return {number} the gl texture type\n\t   */\n\t  function getTextureTypeForArrayType(gl, src) {\n\t    if (isArrayBuffer(src)) {\n\t      return typedArrays.getGLTypeForTypedArray(src);\n\t    }\n\t    return gl.UNSIGNED_BYTE;\n\t  }\n\n\t  function guessDimensions(gl, target, width, height, numElements) {\n\t    if (numElements % 1 !== 0) {\n\t      throw \"can't guess dimensions\";\n\t    }\n\t    if (!width && !height) {\n\t      var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));\n\t      if (size % 1 === 0) {\n\t        width = size;\n\t        height = size;\n\t      } else {\n\t        width = numElements;\n\t        height = 1;\n\t      }\n\t    } else if (!height) {\n\t      height = numElements / width;\n\t      if (height % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    } else if (!width) {\n\t      width = numElements / height;\n\t      if (width % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    }\n\t    return {\n\t      width: width,\n\t      height: height\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n\t   * guess the size. See {@link module:twgl.TextureOptions}.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {(number[]|ArrayBuffer)} src An array or typed arry with texture data.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFromArray(gl, tex, src, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var width = options.width;\n\t    var height = options.height;\n\t    var depth = options.depth;\n\t    var format = options.format || gl.RGBA;\n\t    var internalFormat = options.internalFormat || format;\n\t    var type = options.type || getTextureTypeForArrayType(gl, src);\n\t    var numComponents = getNumComponentsForFormat(format);\n\t    var numElements = src.length / numComponents;\n\t    if (numElements % 1) {\n\t      throw \"length wrong size for format: \" + glEnumToString(gl, format);\n\t    }\n\t    var dimensions;\n\t    if (target === gl.TEXTURE_3D) {\n\t      if (!width && !height && !depth) {\n\t        var size = Math.cbrt(numElements);\n\t        if (size % 1 !== 0) {\n\t          throw \"can't guess cube size of array of numElements: \" + numElements;\n\t        }\n\t        width = size;\n\t        height = size;\n\t        depth = size;\n\t      } else if (width && (!height || !depth)) {\n\t        dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n\t        height = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else if (height && (!width || !depth)) {\n\t        dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n\t        width = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else {\n\t        dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t      }\n\t    } else {\n\t      dimensions = guessDimensions(gl, target, width, height, numElements);\n\t      width = dimensions.width;\n\t      height = dimensions.height;\n\t    }\n\t    if (!isArrayBuffer(src)) {\n\t      var Type = typedArrays.getTypedArrayTypeForGLType(type);\n\t      src = new Type(src);\n\t    } else {\n\t      if (src instanceof Uint8ClampedArray) {\n\t        src = new Uint8Array(src.buffer);\n\t      }\n\t    }\n\t    gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      var faceSize = numElements / 6 * numComponents;\n\t      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t        var offset = faceSize * f.ndx;\n\t        var data = src.subarray(offset, offset + faceSize);\n\t        gl.texImage2D(f.face, 0, internalFormat, width, height, 0, format, type, data);\n\t      });\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, src);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, src);\n\t    }\n\t    restorePackState(gl, options);\n\t    return {\n\t      width: width,\n\t      height: height,\n\t      depth: depth\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n\t   * You must set `options.width` and `options.height`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setEmptyTexture(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var format = options.format || gl.RGBA;\n\t    var internalFormat = options.internalFormat || format;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t    }\n\t    restorePackState(gl, options);\n\t  }\n\n\t  /**\n\t   * Creates a texture based on the options passed in.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n\t   * @return {WebGLTexture} the created texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTexture(gl, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    var tex = gl.createTexture();\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    var width = options.width || 1;\n\t    var height = options.height || 1;\n\t    gl.bindTexture(target, tex);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      // this should have been the default for CUBEMAPS :(\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    }\n\t    var src = options.src;\n\t    if (src) {\n\t      if (typeof src === \"function\") {\n\t        src = src(gl, options);\n\t      }\n\t      if (typeof src === \"string\") {\n\t        loadTextureFromUrl(gl, tex, options, callback);\n\t      } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {\n\t        var dimensions = setTextureFromArray(gl, tex, src, options);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t      } else if (Array.isArray(src) && typeof src[0] === 'string') {\n\t        loadCubemapFromUrls(gl, tex, options, callback);\n\t      } else if (src instanceof HTMLElement) {\n\t        setTextureFromElement(gl, tex, src, options);\n\t        width = src.width;\n\t        height = src.height;\n\t      } else {\n\t        throw \"unsupported src type\";\n\t      }\n\t    } else {\n\t      setEmptyTexture(gl, tex, options);\n\t    }\n\t    if (options.auto !== false) {\n\t      setTextureFilteringForSize(gl, tex, options, width, height);\n\t    }\n\t    setTextureParameters(gl, tex, options);\n\t    return tex;\n\t  }\n\n\t  /**\n\t   * Resizes a texture based on the options passed in.\n\t   *\n\t   * Note: This is not a generic resize anything function.\n\t   * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n\t   * It will use `options.src` if it exists to try to determine a `type`\n\t   * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n\t   * for the texture. Texture parameters will be set accordingly\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the texture to resize\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {number} [width] the new width. If not passed in will use `options.width`\n\t   * @param {number} [height] the new height. If not passed in will use `options.height`\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function resizeTexture(gl, tex, options, width, height) {\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var format = options.format || gl.RGBA;\n\t    var type;\n\t    var src = options.src;\n\t    if (!src) {\n\t      type = options.type || gl.UNSIGNED_BYTE;\n\t    } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {\n\t      type = options.type || getTextureTypeForArrayType(gl, src);\n\t    } else {\n\t      type = options.type || gl.UNSIGNED_BYTE;\n\t    }\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, format, width, height, 0, format, type, null);\n\t      }\n\t    } else {\n\t      gl.texImage2D(target, 0, format, width, height, 0, format, type, null);\n\t    }\n\t  }\n\n\t  /**\n\t   * Check if a src is an async request.\n\t   * if src is a string we're going to download an image\n\t   * if src is an array of strings we're going to download cubemap images\n\t   * @param {*} src The src from a TextureOptions\n\t   * @returns {bool} true if src is async.\n\t   */\n\t  function isAsyncSrc(src) {\n\t    return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n\t  }\n\n\t  /**\n\t   * Creates a bunch of textures based on the passed in options.\n\t   *\n\t   * Example:\n\t   *\n\t   *     var textures = twgl.createTextures(gl, {\n\t   *       // a power of 2 image\n\t   *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n\t   *       // a non-power of 2 image\n\t   *       clover: { src: \"images/clover.jpg\" },\n\t   *       // From a canvas\n\t   *       fromCanvas: { src: ctx.canvas },\n\t   *       // A cubemap from 6 images\n\t   *       yokohama: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: [\n\t   *           'images/yokohama/posx.jpg',\n\t   *           'images/yokohama/negx.jpg',\n\t   *           'images/yokohama/posy.jpg',\n\t   *           'images/yokohama/negy.jpg',\n\t   *           'images/yokohama/posz.jpg',\n\t   *           'images/yokohama/negz.jpg',\n\t   *         ],\n\t   *       },\n\t   *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n\t   *       goldengate: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: 'images/goldengate.jpg',\n\t   *       },\n\t   *       // A 2x2 pixel texture from a JavaScript array\n\t   *       checker: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         src: [\n\t   *           255,255,255,255,\n\t   *           192,192,192,255,\n\t   *           192,192,192,255,\n\t   *           255,255,255,255,\n\t   *         ],\n\t   *       },\n\t   *       // a 1x2 pixel texture from a typed array.\n\t   *       stripe: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         format: gl.LUMINANCE,\n\t   *         src: new Uint8Array([\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *         ]),\n\t   *         width: 1,\n\t   *       },\n\t   *     });\n\t   *\n\t   * Now\n\t   *\n\t   * *   `textures.hftIcon` will be a 2d texture\n\t   * *   `textures.clover` will be a 2d texture\n\t   * *   `textures.fromCanvas` will be a 2d texture\n\t   * *   `textures.yohohama` will be a cubemap texture\n\t   * *   `textures.goldengate` will be a cubemap texture\n\t   * *   `textures.checker` will be a 2d texture\n\t   * *   `textures.stripe` will be a 2d texture\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n\t   * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n\t   * @return {Object.<string,WebGLTexture>} the created textures by name\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTextures(gl, textureOptions, callback) {\n\t    callback = callback || noop;\n\t    var numDownloading = 0;\n\t    var errors = [];\n\t    var textures = {};\n\t    var images = {};\n\n\t    function callCallbackIfReady() {\n\t      if (numDownloading === 0) {\n\t        setTimeout(function () {\n\t          callback(errors.length ? errors : undefined, textures, images);\n\t        }, 0);\n\t      }\n\t    }\n\n\t    Object.keys(textureOptions).forEach(function (name) {\n\t      var options = textureOptions[name];\n\t      var onLoadFn;\n\t      if (isAsyncSrc(options.src)) {\n\t        onLoadFn = function (err, tex, img) {\n\t          images[name] = img;\n\t          --numDownloading;\n\t          if (err) {\n\t            errors.push(err);\n\t          }\n\t          callCallbackIfReady();\n\t        };\n\t        ++numDownloading;\n\t      }\n\t      textures[name] = createTexture(gl, options, onLoadFn);\n\t    });\n\n\t    // queue the callback if there are no images to download.\n\t    // We do this because if your code is structured to wait for\n\t    // images to download but then you comment out all the async\n\t    // images your code would break.\n\t    callCallbackIfReady();\n\n\t    return textures;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"setDefaults_\": setDefaults,\n\n\t    \"createTexture\": createTexture,\n\t    \"setEmptyTexture\": setEmptyTexture,\n\t    \"setTextureFromArray\": setTextureFromArray,\n\t    \"loadTextureFromUrl\": loadTextureFromUrl,\n\t    \"setTextureFromElement\": setTextureFromElement,\n\t    \"setTextureFilteringForSize\": setTextureFilteringForSize,\n\t    \"setTextureParameters\": setTextureParameters,\n\t    \"setDefaultTextureColor\": setDefaultTextureColor,\n\t    \"createTextures\": createTextures,\n\t    \"resizeTexture\": resizeTexture,\n\t    \"getNumComponentsForFormat\": getNumComponentsForFormat\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * vertex array object related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/vertexArrays\n\t   */\n\n\t  /**\n\t   * @typedef {Object} VertexArrayInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n\t   *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n\t   *   who's attributes use the same attribute locations for the same purposes.\n\t   *\n\t   * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n\t   *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n\t   *\n\t   * also\n\t   *\n\t   * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n\t   *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n\t   *   will affect the Vertex Array Object state.\n\t   *\n\t   * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n\t   *\n\t   *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n\t   *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n\t   *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n\t   *    now attribute D's location.\n\t   *\n\t   *    So, you can pass in both shader 1 and shader 2's programInfo\n\t   *\n\t   * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n\t   *\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\n\t  function createVertexArrayInfo(gl, programInfos, bufferInfo) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    if (!programInfos.length) {\n\t      programInfos = [programInfos];\n\t    }\n\t    programInfos.forEach(function (programInfo) {\n\t      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t    });\n\t    gl.bindVertexArray(null);\n\t    return {\n\t      numElements: bufferInfo.numElements,\n\t      elementType: bufferInfo.elementType,\n\t      vertexArrayObject: vao\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    programs.setAttributes(setters, attribs);\n\t    if (indices) {\n\t      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t    }\n\t    // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n\t    // like when creating buffers for other stuff will mess up this VAO's binding\n\t    gl.bindVertexArray(null);\n\t    return vao;\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes\n\t   * on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n\t   * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n\t    return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createVertexArrayInfo\": createVertexArrayInfo,\n\t    \"createVAOAndSetAttributes\": createVAOAndSetAttributes,\n\t    \"createVAOFromBufferInfo\": createVAOFromBufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;","import twgl from 'twgl-base.js';\nimport VERTEX_GLSL from './vertex.glsl';\nimport FRAGMENT_GLSL from './fragment.glsl';\n\nvar gl = twgl.getWebGLContext(document.getElementById(\"c\"));\nvar programInfo = twgl.createProgramInfo(gl, [VERTEX_GLSL, FRAGMENT_GLSL]);\n\nvar arrays = {\n  position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0],\n};\nvar bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\nfunction resize() {\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n}\n\nfunction render(time) {\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n  var uniforms = {\n    time: time * 0.001,\n    resolution: [gl.canvas.width, gl.canvas.height],\n  };\n\n  gl.useProgram(programInfo.program);\n  twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  twgl.setUniforms(programInfo, uniforms);\n  twgl.drawBufferInfo(gl, bufferInfo);\n\n  requestAnimationFrame(render);\n}\n\nwindow.addEventListener(\"resize\", resize, false);\nresize();\nrequestAnimationFrame(render);\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","twgl","apply","undefined","attributes","draw","framebuffers","programs","textures","typedArrays","vertexArrays","utils","gl","defaults","setDefaults","newDefaults","copyExistingProperties","setDefaults_","addVertexArrayObjectSupport","enableVertexArrayObjects","isWebGL1","ext","getExtension","createVertexArray","createVertexArrayOES","deleteVertexArray","v","deleteVertexArrayOES","isVertexArray","isVertexArrayOES","bindVertexArray","bindVertexArrayOES","VERTEX_ARRAY_BINDING","VERTEX_ARRAY_BINDING_OES","create3DContext","canvas","opt_attribs","names","context","ii","length","getContext","e","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","Math","max","width","clientWidth","height","clientHeight","api","isWebGL2","notPrivate","name","copyPublicProperties","src","dst","keys","filter","forEach","key","apis","srcApi","setAttributePrefix","prefix","attribPrefix","setBufferFromTypedArray","type","buffer","array","drawType","bindBuffer","bufferData","STATIC_DRAW","createBufferFromTypedArray","typedArray","WebGLBuffer","ARRAY_BUFFER","createBuffer","isIndices","getNormalizationForTypedArray","Int8Array","Uint8Array","getArray","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","getNumComponents","arrayName","size","makeTypedArray","isArrayBuffer","Array","isArray","Type","Uint16Array","Float32Array","createAttribsFromArrays","arrays","attribs","attribName","attrib","getGLTypeForTypedArray","normalize","stride","offset","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getNumElementsFromNonIndexedArrays","positionKeys","Object","numElements","createBufferInfoFromArrays","bufferInfo","indices","ELEMENT_ARRAY_BUFFER","elementType","createBufferFromArray","createBuffersFromArrays","buffers","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","Uint8ClampedArray","Int16Array","Int32Array","Uint32Array","getTypedArrayTypeForGLType","a","ArrayBuffer","shallowCopy","copyNamedProperties","value","hasOwnProperty","getVersionAsNumber","parseFloat","getParameter","VERSION","substr","indexOf","version","error","window","console","bind","warn","drawBufferInfo","count","TRIANGLES","drawElements","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","setBuffersAndAttributes","setUniforms","uniforms","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","units","index","setter","arraySetter","floatAttribSetter","b","enableVertexAttribArray","vertexAttribPointer","intAttribSetter","vertexAttribIPointer","matAttribSetter","typeInfo","defaultSize","rowOffset","i","attrTypeMap","addLineNumbers","lineOffset","split","map","line","ndx","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","replace","compileShader","compiled","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_locations","errorCallback","opt","attribLocations","options","createProgram","shaders","progOptions","attachShader","bindAttribLocation","linkProgram","linked","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","document","getElementById","text","VERTEX_SHADER","FRAGMENT_SHADER","defaultShaderType","createProgramFromScripts","shaderScriptIds","push","createProgramFromSources","shaderSources","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","toString","uniformSetters","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ACTIVE_UNIFORM_BLOCKS","getActiveUniformBlockName","blockSpec","getActiveUniformBlockParameter","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","used","usedByVertexSahder","usedByFragmentShader","arraySuffixRE","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","uniformBufferIndex","UNIFORM_BUFFER","uniformBlockBinding","uniformNdx","BYTES_PER_ELEMENT","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","bindBufferRange","byteLength","setUniformBlock","DYNAMIC_DRAW","setBlockUniforms","values","set","setters","actualSetters","numArgs","arguments","andx","vals","numValues","createAttributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","setAttributes","createProgramInfoFromProgram","createProgramInfo","good","source","script","DEPTH_COMPONENT","RGBA","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","renderbufferFormats","isRenderbufferFormat","createFramebufferInfo","attachments","target","FRAMEBUFFER","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","attachmentOptions","attachment","attachmentPoint","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","textureOptions","auto","mag","wrapS","wrapT","createTexture","WebGLRenderbuffer","framebufferRenderbuffer","WebGLTexture","framebufferTexture2D","texTarget","level","resizeFramebufferInfo","resizeTexture","bindFramebufferInfo","framebuffer","viewport","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","setDefaultTextureColor","color","textureColor","glEnumToString","enums","init","lastPackState","savePackState","colorspaceConversion","UNPACK_COLORSPACE_CONVERSION_WEBGL","pixelStorei","premultiplyAlpha","UNPACK_PREMULTIPLY_ALPHA_WEBGL","flipY","UNPACK_FLIP_Y_WEBGL","restorePackState","setTextureParameters","tex","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","wrapR","minLod","TEXTURE_MIN_LOD","maxLod","TEXTURE_MAX_LOD","baseLevel","TEXTURE_BASE_LEVEL","maxLevel","TEXTURE_MAX_LEVEL","make1Pixel","isPowerOf2","setTextureFilteringForSize","generateMipmap","getCubeFaceOrder","cubeFaceOrder","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","setTextureFromElement","ctx","createElement","element","internalFormat","imgWidth","imgHeight","slices","nodeName","f","xOffset","yOffset","drawImage","texImage2D","smallest","largest","depth","xMult","yMult","texImage3D","d","srcX","srcY","srcW","srcH","dstX","dstY","dstW","dstH","texSubImage3D","noop","loadImage","url","crossOrigin","callback","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","setTextureTo1PixelColor","loadTextureFromUrl","err","loadCubemapFromUrls","urls","numToLoad","errors","imgs","uploadImg","faceTarget","otherTarget","getNumComponentsForFormat","getTextureTypeForArrayType","guessDimensions","sqrt","setTextureFromArray","dimensions","cbrt","UNPACK_ALIGNMENT","unpackAlignment","faceSize","subarray","setEmptyTexture","HTMLElement","isAsyncSrc","createTextures","numDownloading","images","callCallbackIfReady","onLoadFn","createVertexArrayInfo","programInfos","vao","createVAOAndSetAttributes","createVAOFromBufferInfo","VERTEX_GLSL","FRAGMENT_GLSL","resize","render","time","requestAnimationFrame"],"mappings":"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"}